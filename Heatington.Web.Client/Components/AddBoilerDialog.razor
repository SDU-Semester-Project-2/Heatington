@using ResourceManager = Heatington.Web.Client.Pages.ResourceManager
@using Heatington.Models
@using Heatington.AssetManager
@using Heatington.Services.LocalStorage
@using System.Text.Json
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@* AddProductionUnitDialog Component *@

<MudDialog>
    <DialogContent>
        @* <InputFile OnChange="HandleImageUpload" accept=".jpg, .jpeg, .png"/> *@

        <MudFileUpload T="IBrowserFile" FilesChanged="HandleImageUpload">
            <ButtonTemplate>
                <MudFab HtmlTag="label"
                        DisableElevation
                        Color="Color.Secondary"
                        Icon="@Icons.Material.Filled.Image"
                        Label="Load picture"
                        for="@context.Id"/>
            </ButtonTemplate>
        </MudFileUpload>
        <MudTextField @bind-Value="@NewProductionUnit.Name" Label="Name" Variant="Variant.Outlined" Required/>
        <MudTextField @bind-Value="@NewProductionUnit.FullName" Label="Full Name" Variant="Variant.Outlined" Required/>
        <MudTextField @bind-Value="@NewProductionUnit.MaxHeat" Label="Max Heat" Variant="Variant.Outlined" Required/>
        <MudTextField @bind-Value="@NewProductionUnit.MaxElectricity" Label="Max Electricity" Variant="Variant.Outlined"/>
        <MudTextField @bind-Value="@NewProductionUnit.ProductionCost" Label="Production Costs" Variant="Variant.Outlined"/>
        <MudTextField @bind-Value="@NewProductionUnit.Co2Emission" Label="CO2 Emissions" Variant="Variant.Outlined"/>
        <MudTextField @bind-Value="@NewProductionUnit.GasConsumption" Label="Gas Consumption" Variant="Variant.Outlined"/>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" Size="Size.Large" Variant="Variant.Filled" OnClick="AddProductionUnit">Add</MudButton>
    </DialogActions>
</MudDialog>

@code {
    string imageBase64;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Dictionary<ProductionUnitsEnum, ProductionUnit> ProductionUnits { get; set; }
    ProductionUnit NewProductionUnit = new ProductionUnit();

    async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var format = "image/png";

        var resizedImage = await e.File.RequestImageFileAsync(format, 220, 220);
        var buffer = new byte[resizedImage.Size];

        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imagesrc = Convert.ToBase64String(buffer);

        var imageData = $"data:{format};base64,{imagesrc}";

        NewProductionUnit.PicturePath = imageData;
    }

    async Task HandleImageUpload(IBrowserFile file)
    {
        var format = "image/png";

        var resizedImage = await file.RequestImageFileAsync(format, 220, 220);
        var buffer = new byte[resizedImage.Size];

        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imagesrc = Convert.ToBase64String(buffer);

        var imageData = $"data:{format};base64,{imagesrc}";

        NewProductionUnit.PicturePath = imageData;
    }

    async Task AddProductionUnit()
    {
        ProductionUnits.Add(ProductionUnitsEnum.CustomBoiler,NewProductionUnit);
        NewProductionUnit = new ProductionUnit();
        await LocalStorage.SetItemAsync("production-units", JsonSerializer.Serialize(ProductionUnits));
        MudDialog.Close(DialogResult.Ok(true));
        // Save ProductionUnits to LocalStorage
    }

}
