@inject NavigationManager NavManager
@page "/"

<style>
.text-center {
    text-align: center;
}
</style>

<style>
.space-y-4 > * + * {
    margin-top: 2rem;
}
</style>

<PageTitle>Dashboard</PageTitle>

<MudContainer Class="d-flex flex-column align-items-center text-align-center space-y-4 ">
    @* <MudImage Src="Assets/Images/heating-grid.png"></MudImage> *@

    <MudText Typo="Typo.h4" class="text-center">
        Statistics
    </MudText>
    <MudGrid>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="8" class="mx-2 my-3 px-4 py-4">
                <div class="d-flex align-items-start">
                    <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Size="Size.Large" class="mr-3"/>
                    <div>
                        <MudText Typo="Typo.h5" GutterBottom>Expenses</MudText>
                        <MudText Typo="Typo.h6">@($"{TotalExpenses} DKK")</MudText>
                    </div>
                </div>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="8" class="mx-2 my-3 px-4 py-4">
                <div class="d-flex align-items-start">
                    <MudIcon Icon="@Icons.Material.Filled.AccountBalance" Size="Size.Large" class="mr-3"/>
                    <div>
                        <MudText Typo="Typo.h5" GutterBottom>Profit</MudText>
                        <MudText Typo="Typo.h6">@($"{totalProfit} DKK")</MudText>
                    </div>
                </div>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="8" class="mx-2 my-3 px-4 py-4">
                <div class="d-flex align-items-start">
                    <MudIcon Icon="@Icons.Material.Filled.Cloud" Size="Size.Large" class="mr-3"/>
                    <div>
                        <MudText Typo="Typo.h5" GutterBottom>CO2 Produced</MudText>
                        <MudText Typo="Typo.h6">@($"{totalCO2Produced} kg")</MudText>
                    </div>
                </div>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="8" class="mx-2 my-3 px-4 py-4">
                <div class="d-flex align-items-start">
                    <MudIcon Icon="@Icons.Material.Filled.WbSunny" Size="Size.Large" class="mr-3"/>
                    <div>
                        <MudText Typo="Typo.h5" GutterBottom>Heat Produced</MudText>
                        <MudText Typo="Typo.h6">@($"{totalHeatProduced} MW")</MudText>
                    </div>
                </div>
            </MudCard>
        </MudItem>
    </MudGrid>
    <MudDivider FlexItem></MudDivider>
    <MudText Typo="Typo.h4" class="text-center">
        Heat
    </MudText>
    <div>
        <MudChart ChartType="ChartType.Line" ChartSeries="@_seriesHeat" @bind-SelectedIndex="_indexHeat" XAxisLabels="@_xAxisLabels1" Width="100%" Height="350px" ChartOptions="@_options"/>
        <MudGrid>
            @* <MudItem xs="12"> *@
            @*     <MudText Class="text-center" Typo="Typo.body1">Selected: @(_indexHeat < 0 ? "None" : _seriesHeat[_indexHeat].Name)</MudText> *@
            @* </MudItem> *@
        </MudGrid>
    </div>
    <MudDivider FlexItem></MudDivider>
    <MudText Typo="Typo.h4" class="text-center">
        Electricity
    </MudText>
    <div>
        <MudChart ChartType="ChartType.Line" ChartSeries="@_seriesElectricity" @bind-SelectedIndex="_indexElectricity" XAxisLabels="@_xAxisLabels1" Width="100%" Height="350px" ChartOptions="@_options"/>
        <MudGrid>
            @* <MudItem xs="12"> *@
            @*     <MudText Class="text-center" Typo="Typo.body1">Selected: @(_indexElectricity < 0 ? "None" : _seriesElectricity[_indexElectricity].Name)</MudText> *@
            @* </MudItem> *@
        </MudGrid>
    </div>
    <MudDivider FlexItem></MudDivider>
    <MudText Typo="Typo.h4" class="text-center">
        Optimizer
    </MudText>
    <div>
        <MudChart ChartType="ChartType.Line" ChartSeries="@_seriesBoilers" XAxisLabels="@_xAxisLabels3" Width="100%" Height="350px" CanHideSeries/>
        <MudGrid>
            @* <MudItem xs="12"> *@
            @*     <MudText Class="text-center" Typo="Typo.body1">Selected: @(_indexBoilers < 0 ? "None" : _seriesBoilers[_indexBoilers].Name)</MudText> *@
            @* </MudItem> *@
        </MudGrid>
    </div>
    <MudDivider FlexItem></MudDivider>
    <MudText Typo="Typo.h4" class="text-center">
        Boilers
    </MudText>
    <MudTable Items="@_boilers" ServerData="new Func<TableState, Task<TableData<Boiler>>>(GetBoilersAsync)">
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Boiler, object>(boiler => boiler.Name)">Name</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Boiler, object>(boiler => boiler.MaxHeat)">Max Heat</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Boiler, object>(boiler => boiler.MaxElectricity)">Max Electricity</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Boiler, object>(boiler => boiler.ProductionCosts)">Production Costs</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Boiler, object>(boiler => boiler.CO2Emissions)">CO2 Emissions</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Boiler, object>(boiler => boiler.PrimaryEnergy)">Primary Energy</MudTableSortLabel>
            </MudTh>
            <MudTh></MudTh> <!-- Header for the 'View More' button -->
        </HeaderContent>

        <RowTemplate Context="boiler">
            <MudTd DataLabel="Name">@DisplayData(@boiler.Name)</MudTd>
            <MudTd DataLabel="Max Heat">@DisplayData(@boiler.MaxHeat)</MudTd>
            <MudTd DataLabel="Max Electricity">@DisplayData(@boiler.MaxElectricity)</MudTd>
            <MudTd DataLabel="Production Costs">@DisplayData(@boiler.ProductionCosts)</MudTd>
            <MudTd DataLabel="CO2 Emissions">@DisplayData(@boiler.CO2Emissions)</MudTd>
            <MudTd DataLabel="Primary Energy">@DisplayData(@boiler.PrimaryEnergy)</MudTd>
            <MudTd>
                <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" OnClick="(() => ViewMore(boiler))">
                    View More
                </MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>

</MudContainer>

@code {

    readonly List<Boiler> _boilers =
    [
        new Boiler
        {
            Name = "Gas Boiler",
            MaxHeat = "5.0 MW",
            MaxElectricity = "",
            ProductionCosts = "500 DKK / MWh(th)",
            CO2Emissions = "215 kg / MWh(th)",
            PrimaryEnergy = "1,1 MWh(gas) / MWh(th)"
        },

        new Boiler
        {
            Name = "Oil Boiler",
            MaxHeat = "4.0 MW",
            MaxElectricity = "",
            ProductionCosts = "700 DKK / MWh(th)",
            CO2Emissions = "265 kg / MWh(th)",
            PrimaryEnergy = "1,2 MWh(oil) / MWh(th)"
        },

        new Boiler
        {
            Name = "Gas Motor",
            MaxHeat = "3.6 MW",
            MaxElectricity = "2.7 MW",
            ProductionCosts = "1,100 DKK / MWh(th)",
            CO2Emissions = "640 kg / MWh(th)",
            PrimaryEnergy = "1.9 MWh(gas) / MWh(th)"
        },

        new Boiler
        {
            Name = "Electric Boiler",
            MaxHeat = "8.0 MW",
            MaxElectricity = "-8.0 MW",
            ProductionCosts = "50 DKK / MWh(th)",
            CO2Emissions = "", // As no value provided
            PrimaryEnergy = "" // As no value provided
        }
    ];

    public class Boiler
    {
        public string Name { get; set; }
        public string MaxHeat { get; set; }
        public string MaxElectricity { get; set; }
        public string ProductionCosts { get; set; }
        public string CO2Emissions { get; set; }
        public string PrimaryEnergy { get; set; }
        public SortDirection? SortDirection { get; set; }
    }

    private void ViewMore(Boiler boiler)
    {
        NavManager.NavigateTo("/resource-manager");
    }

    private void GoTo(string pageName)
    {
        NavManager.NavigateTo($"/{pageName}");
    }

    private string DisplayData(string data) => data.Length != 0 ? data : "No Data";


    // for heat chart

    private int _indexHeat = -1;
    private int _indexElectricity = -1;
    private int _indexBoilers = -1;
    private readonly ChartOptions _options = new ChartOptions();

    private List<ChartSeries> _seriesHeat = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Heat Demand", Data = new double[] { 90, 79, 72, 69, 62, 68, 89 }, },
        new ChartSeries() { Name = "Heat Produced", Data = new double[] { 92, 78, 73, 75, 60, 68, 89 }, }
    };

    private readonly string[] _xAxisLabels1 = { "01.01.2024", "02.01.2024", "03.01.2024", "04.01.2024", "05.01.2024", "06.01.2024", "07.01.2024" };


    // for electricity chart

    private readonly List<ChartSeries> _seriesElectricity = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Electricity Production", Data = new double[] { 110, 105, 115, 120, 108, 112, 118 }, },
        new ChartSeries() { Name = "Electricity Consumption", Data = new double[] { 115, 100, 113, 118, 109, 115, 117 }, },
        new ChartSeries() { Name = "Electricity Price", Data = new double[] { 50, 55, 60, 53, 57, 54, 59 }, }
    };


    // for optimizer chart

    private List<ChartSeries> _seriesBoilers = new List<ChartSeries>();
    private readonly string[] _xAxisLabels3 = { "01.01.2024", "02.01.2024", "03.01.2024", "04.01.2024", "05.01.2024", "06.01.2024", "07.01.2024" };

    readonly Random random = new Random();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        RandomizeData();
    }

    private void RandomizeData()
    {
        var newSeries = new List<ChartSeries>();
        foreach (var boiler in _boilers)
        {
            var series = new ChartSeries() { Name = boiler.Name, Data = new double[4] };
            for (int i = 0; i < 4; i++)
                series.Data[i] = random.NextDouble() * 100;
            newSeries.Add(series);
        }

        _seriesBoilers = newSeries;
        StateHasChanged();
    }

    private double TotalExpenses = new Random().Next(50000, 100000);
    private double totalProfit = new Random().Next(100000, 200000);
    private double totalCO2Produced = new Random().Next(20000, 50000);
    private double totalHeatProduced = new Random().Next(5000, 10000);

    // Trying to implement sorting TODO: not working on mobile version?!
    public async Task<TableData<Boiler>> GetBoilersAsync(TableState state)
    {
        Func<Boiler, object> sortBy = null;
        switch (state.SortLabel)
        {
            case "Max Heat":
                sortBy = (boiler) => boiler.MaxHeat;
                break;
            case "Production Costs":
                sortBy = (boiler) => boiler.ProductionCosts;
                break;
            case "CO2 Emissions":
                sortBy = (boiler) => boiler.CO2Emissions;
                break;
            case "Primary Energy":
                sortBy = (boiler) => boiler.PrimaryEnergy;
                break;
            default:
                sortBy = (boiler) => boiler.Name;
                break;
        }

        var sorted = state.SortDirection switch
        {
            SortDirection.Ascending => _boilers.OrderBy(sortBy).ToList(),
            SortDirection.Descending => _boilers.OrderByDescending(sortBy).ToList(),
            _ => _boilers
        };

        return await Task.FromResult(new TableData<Boiler>
        {
            TotalItems = sorted.Count,
            Items = sorted.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList()
        });
    }

}
