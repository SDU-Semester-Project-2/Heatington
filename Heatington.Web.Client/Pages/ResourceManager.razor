@page "/resource-manager"
@using Heatington.Web.Client.Components
@using System.Globalization
@inject IDialogService DialogService

<style>
.table {
    width: 100%;
    margin: 2rem auto;
    border-collapse: collapse;
}

.table tr {
    border-bottom: 1px solid #ddd;
}

.table th,
.table td {
    padding: 15px;
    text-align: left;
}

.table tr:nth-child(even) {
    background-color: #f2f2f2;
}

.table th {
    background-color: #333;
    color: white;
}

.table td {
    vertical-align: middle;
}
</style>


<div style="display: flex;  align-items: center; justify-content: center;">
    <h2 style="margin-left: 15px;">Boilers</h2>
    <MudButton style="margin-left: 15px"
        OnClick="() => OpenDialog()" Color="Color.Primary" Size="Size.Medium" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add">Add Boiler</MudButton>
</div>

<div style="display: flex; flex-wrap: wrap; justify-content: center; margin-top: 2rem">
    @foreach (var boiler in _boilers)
    {
        <MudCard Style="min-width: 200px; max-width: 200px; margin: 5px">
            <MudCardContent>
                <div style="display: flex; justify-content: center;">
                    <MudImage Style="min-width: 150px; max-width: 150px; max-height: 150px; min-height: 150px" Src="@($"Assets/Images/{@boiler.ImagePath}.jpg")"></MudImage>
                </div>
                <h4 style="text-align: center;">@boiler.Name</h4>
                <p style="font-size: 0.8em;">Max Heat: @boiler.MaxHeat</p>
                <p style="font-size: 0.8em;">Max Electricity: @boiler.MaxElectricity</p>
                <p style="font-size: 0.8em;">Production Costs: @boiler.ProductionCosts</p>
                <p style="font-size: 0.8em;">CO2 Emissions: @boiler.CO2Emissions</p>
                <p style="font-size: 0.8em;">Primary Energy Consumption: @boiler.PrimaryEnergy</p>
            </MudCardContent>
        </MudCard>
    }
</div>
<div style="display: flex;  align-items: center; justify-content: center; margin-top: 2rem">
    <h2 style="margin-left: 15px; margin-right: 15px">Heat Demand Data</h2>
    <InputFile id="fileUpload" OnChange="HandleCSVUpload"></InputFile>
</div>
@if (heatDemandDataList != null && heatDemandDataList.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Time Start</th>
                <th>Time End</th>
                <th>Heat Demand</th>
                <th>Electricity Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var data in heatDemandDataList)
            {
                <tr>
                    <td>@data.StartDate</td>
                    <td>@data.EndDate</td>
                    <td>@data.Value1</td>
                    <td>@data.Value2</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {

    readonly List<Boiler> _boilers =
    [
        new Boiler
        {
            Name = "Gas Boiler",
            ImagePath = "gas-boiler",
            MaxHeat = "5.0 MW",
            MaxElectricity = "",
            ProductionCosts = "500 DKK / MWh(th)",
            CO2Emissions = "215 kg / MWh(th)",
            PrimaryEnergy = "1,1 MWh(gas) / MWh(th)"
        },

        new Boiler
        {
            Name = "Oil Boiler",
            ImagePath = "oil-boiler",
            MaxHeat = "4.0 MW",
            MaxElectricity = "",
            ProductionCosts = "700 DKK / MWh(th)",
            CO2Emissions = "265 kg / MWh(th)",
            PrimaryEnergy = "1,2 MWh(oil) / MWh(th)"
        },

        new Boiler
        {
            Name = "Gas Motor",
            ImagePath = "gas-motor",
            MaxHeat = "3.6 MW",
            MaxElectricity = "2.7 MW",
            ProductionCosts = "1,100 DKK / MWh(th)",
            CO2Emissions = "640 kg / MWh(th)",
            PrimaryEnergy = "1.9 MWh(gas) / MWh(th)"
        },

        new Boiler
        {
            Name = "Electric Boiler",
            ImagePath = "electric-boiler",
            MaxHeat = "8.0 MW",
            MaxElectricity = "-8.0 MW",
            ProductionCosts = "50 DKK / MWh(th)",
            CO2Emissions = "", // As no value provided
            PrimaryEnergy = "" // As no value provided
        }

    ];

    public class Boiler
    {
        public string Name { get; set; }
        public string ImagePath { get; set; }
        public string MaxHeat { get; set; }
        public string MaxElectricity { get; set; }
        public string ProductionCosts { get; set; }
        public string CO2Emissions { get; set; }
        public string PrimaryEnergy { get; set; }
        public SortDirection? SortDirection { get; set; }
    }

    void OpenDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("Boilers", _boilers);

        DialogService.Show<AddBoilerDialog>("Add Boiler", parameters, new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true });
    }
    private List<HeatDemandData> heatDemandDataList = new List<HeatDemandData>();

    public class HeatDemandData
    {
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public float Value1 { get; set; }
        public float Value2 { get; set; }
    }

    private async Task HandleCSVUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            var reader = new StreamReader(file.OpenReadStream());
            var csvContent = await reader.ReadToEndAsync();

            var rows = csvContent.Split('\n');

            // Use CultureInfo to handle potential localization issues with decimal point/comma
            var culture = CultureInfo.InvariantCulture;

            foreach (var row in rows)
            {
                var values = row.Split(',');
                if(values.Length == 4)
                {
                    heatDemandDataList.Add(new HeatDemandData
                    {
                        StartDate = DateTime.Parse(values[0], culture),
                        EndDate = DateTime.Parse(values[1], culture),
                        Value1 = float.Parse(values[2], culture),
                        Value2 = float.Parse(values[3], culture),
                    });
                }
            }

            // Notify Blazor to re-render as the data has changed.
            StateHasChanged();
        }
    }
}
