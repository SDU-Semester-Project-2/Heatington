@page "/resource-manager"
@using Heatington.Web.Client.Components
@using System.Globalization
@using System.Text.Json
@using Heatington.AssetManager
@using Heatington.Controllers
@using Heatington.Controllers.Interfaces
@using Heatington.Models
@* @using Heatington.Services.LocalStorage   May use this later*@
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject HttpClient HttpClient
@inject IDialogService DialogService
@rendermode InteractiveWebAssembly

<PageTitle>Resource Manager</PageTitle>


<div style="display: flex;  align-items: center; justify-content: center;">
    <MudText Typo="Typo.h4">Boilers</MudText>
    <MudButton style="margin-left: 15px"
               OnClick="() => OpenDialog()" Color="Color.Primary" Size="Size.Medium" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add">
        Add Boiler
    </MudButton>
</div>

<MudGrid Spacing="4" Justify="Justify.Center" class="mt-5 mb-3">
    @if (productionUnits != null)
    {
        foreach (var productionUnit in productionUnits)
        {
            <MudCard Style="min-width: 200px; max-width: 300px; margin: 4px; padding: 1px">
                @* Using px because rem is too big *@
                <MudCardHeader Style="flex-direction: row; justify-content: center">
                    <MudText Typo="Typo.h6">@productionUnit.Value.FullName</MudText>
                    <MudIconButton Icon="@Icons.Filled.Settings" Color="Color.Primary" OnClick="(() => OpenDialog(productionUnit))"/>
                </MudCardHeader>
                <MudCardContent class="text-center">

                    <div style="display: flex; justify-content: center;">
                        @if (productionUnit.Value.PicturePath?.Length != 0)
                        {
                            <MudImage Style="min-width: 220px; max-width: 220px; max-height: 220px; min-height: 220px" Src="@productionUnit.Value.PicturePath"></MudImage>
                        }
                        else
                        {
                            <MudImage Style="min-width: 220px; max-width: 220px; max-height: 220px; min-height: 220px" Src="@($"Assets/Images/{@productionUnit.Value.PicturePath}.jpg")"></MudImage>
                        }
                    </div>
                    <div class="mt-3">
                        <MudText Typo="Typo.body2">Max Heat: @DisplayData(@productionUnit.Value.MaxHeat)</MudText>
                        <MudText Typo="Typo.body2">Max Electricity: @DisplayData(@productionUnit.Value.MaxElectricity)</MudText>
                        <MudText Typo="Typo.body2">Production Costs: @DisplayData(@productionUnit.Value.ProductionCost)</MudText>
                        <MudText Typo="Typo.body2">CO2 Emissions: @DisplayData(@productionUnit.Value.Co2Emission)</MudText>
                        <MudText Typo="Typo.body2">Primary Energy Consumption: @DisplayData(@productionUnit.Value.GasConsumption)</MudText>
                    </div>
                </MudCardContent>
            </MudCard>
        }
    }
</MudGrid>

<MudDivider class="mt-5 mb-8"></MudDivider>

<MudContainer class="d-flex flex-row justify-center align-center text-center space-y-4 ">
    <div style="flex-direction: column">
        <MudText Typo="Typo.h4"> Heat Demand Data</MudText>
        <InputFile id="fileUpload" OnChange="HandleCsvUpload"></InputFile>
    </div>
</MudContainer>


@if (_heatDemandDataList.Count != 0)
{
    <MudContainer class="mt-8">
        <MudDataGrid Items="@_heatDemandDataList" Hover Dense Striped>
            <Columns>
                <PropertyColumn Property="data => data.StartTime" Title="Start Time"/>
                <PropertyColumn Property="data => data.EndTime" Title="End Time"/>
                <PropertyColumn Property="data => data.HeatDemand" Title="Heat Demand MWh"/>
                <PropertyColumn Property="data => data.ElectricityPrice" Title="Electricity Price DKK/MWh"/>
            </Columns>
        </MudDataGrid>
    </MudContainer>
}

@code {
    // THIS IS THE CODE SECTION FOR ASSET MANAGER
    static readonly string PathToHeatingGrid = "Assets/Data/HeatingGrid.json";
    static readonly string PathToProductionUnits = "Heatington.Web.Client/wwwroot/Assets/Data/ProductionUnits.json";
    static readonly string PathToInitialCsvData= "Assets/Data/winter-data.csv";
    static readonly IReadWriteController HeatingGridJsonController = new JsonController(PathToHeatingGrid);
    static readonly IReadWriteController ProductionUnitsJsonController = new JsonController(PathToProductionUnits);
    static readonly AssetManager AssetManager = new(HeatingGridJsonController, ProductionUnitsJsonController);
    Dictionary<ProductionUnitsEnum, ProductionUnit>? productionUnits;

    // SIMILAR TO USESTATE HOOK IN REACT?
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // Fetching and storing ProductionUnits
        string initialDataJson = await HttpClient.GetStringAsync("Assets/Data/ProductionUnits.json");
        Dictionary<ProductionUnitsEnum, ProductionUnit> _productionUnits =
            JsonSerializer.Deserialize<Dictionary<ProductionUnitsEnum, ProductionUnit>>(initialDataJson);

        string? localStorageDataString = await LocalStorage.GetItemAsync<string>("production-units");
        if (localStorageDataString != null)
        {
            Dictionary<ProductionUnitsEnum, ProductionUnit> localStorageData =
                JsonSerializer.Deserialize<Dictionary<ProductionUnitsEnum, ProductionUnit>>(localStorageDataString);
            productionUnits = localStorageData;
        }
        else
        {
            productionUnits = _productionUnits;
            await LocalStorage.SetItemAsync<string>("production-units", initialDataJson);
        }

        // Prepare filename for CSV Data
        string csvFilename = Path.GetFileNameWithoutExtension(PathToInitialCsvData);
        // Loading, parsing and storing CSV Data
        if (await LocalStorage.ContainKeyAsync(csvFilename))
        {
            string csvContent = await LocalStorage.GetItemAsync<string>(csvFilename);
            ParseCsvData(csvContent);
        }
        else
        {
            if (PathToInitialCsvData != null)
            {
                string initialCsvData = await HttpClient.GetStringAsync(PathToInitialCsvData);
                await LocalStorage.SetItemAsync<string>(csvFilename, initialCsvData);
                ParseCsvData(initialCsvData);
            }
        }
        StateHasChanged();
    }

    private List<DataPoint> _heatDemandDataList = [];

    // METHOD OVERLOADING
    async void OpenDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("ProductionUnits", productionUnits);
        Console.WriteLine("Opening Dialog", parameters.ToString());
        var dialog = await DialogService.ShowAsync<AddBoilerDialog>("Add Boiler", parameters, new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true });
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            StateHasChanged();
        }
    }
    async void OpenDialog(KeyValuePair<ProductionUnitsEnum, ProductionUnit> productionUnit)
    {
        var parameters = new DialogParameters();
        parameters.Add("ProductionUnit", productionUnit.Value);
        parameters.Add("ProductionUnitKey", productionUnit.Key);  // this line is added
        var dialog = await DialogService.ShowAsync<EditBoilerDialog>($"Edit {productionUnit.Value.FullName}", parameters, new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true });
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            // reload the list from the storage in case it was changed
            string? localStorageDataString = await LocalStorage.GetItemAsync<string>("ProductionUnits");
            if (localStorageDataString != null)
            {
                productionUnits = JsonSerializer.Deserialize<Dictionary<ProductionUnitsEnum, ProductionUnit>>(localStorageDataString);
            }
            StateHasChanged();
        }
    }

    private async Task ReadCsvDataOnLoad(string url)
    {
        string csvContent = await HttpClient.GetStringAsync(url);
        ParseCsvData(csvContent);
    }

    private async Task HandleCsvUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var reader = new StreamReader(file.OpenReadStream());
        var csvContent = await reader.ReadToEndAsync();
        await LocalStorage.SetItemAsync("sourceData", csvContent);
        ParseCsvData(csvContent);
    }

    private void ParseCsvData(string csvContent)
    {
        var rows = csvContent.Split('\n');
        var culture = CultureInfo.InvariantCulture;
        foreach (var row in rows)
        {
            var values = row.Split(',');
            if (values.Length == 4)
            {
                _heatDemandDataList.Add(new DataPoint
                {
                    StartTime = DateTime.Parse(values[0], culture),
                    EndTime = DateTime.Parse(values[1], culture),
                    HeatDemand = float.Parse(values[2], culture),
                    ElectricityPrice = float.Parse(values[3], culture)
                });
            }
        }
        StateHasChanged();
    }

    private string? DisplayData(double data) => Convert.ToString(data.ToString(CultureInfo.InvariantCulture).Length != 0 ? data : "No Data");


}

