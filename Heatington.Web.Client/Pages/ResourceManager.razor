@page "/resource-manager"
@using Heatington.Web.Client.Components
@using System.Globalization
@inject IDialogService DialogService

<PageTitle>Resource Manager</PageTitle>



<div style="display: flex;  align-items: center; justify-content: center;">
    <h2 style="margin-left: 15px;">Boilers</h2>
    <MudButton style="margin-left: 15px"
               OnClick="() => OpenDialog()" Color="Color.Primary" Size="Size.Medium" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add">
        Add Boiler
    </MudButton>
</div>

<MudGrid Spacing="4" Justify="Justify.Center" class="mt-5 mb-3">
    @foreach (var boiler in _boilers)
    {
        <MudCard Style="min-width: 200px; max-width: 300px; margin: 5px; padding: 3px">
            <MudCardContent class="text-center">
                <div style="display: flex; justify-content: center;">
                    <MudImage Style="min-width: 200px; max-width: 200px; max-height: 200px; min-height: 200px" Src="@($"Assets/Images/{@boiler.ImagePath}.jpg")"></MudImage>
                </div>
                <MudText Typo="Typo.h6" class="text-center">@boiler.Name</MudText>
                <MudText Typo="Typo.body2">Max Heat: @boiler.MaxHeat</MudText>
                <MudText Typo="Typo.body2">Max Electricity: @boiler.MaxElectricity</MudText>
                <MudText Typo="Typo.body2">Production Costs: @boiler.ProductionCosts</MudText>
                <MudText Typo="Typo.body2">CO2 Emissions: @boiler.CO2Emissions</MudText>
                <MudText Typo="Typo.body2">Primary Energy Consumption: @boiler.PrimaryEnergy</MudText>
            </MudCardContent>
        </MudCard>
    }
</MudGrid>

<MudDivider class="mt-5 mb-8"></MudDivider>

<MudContainer class="d-flex flex-row justify-center align-center text-center space-y-4 ">
    <MudText Typo="Typo.h5" Align="Align.Center" class="mr-4">Heat Demand Data - </MudText>
    <InputFile id="fileUpload" OnChange="HandleCSVUpload"></InputFile>
</MudContainer>




@if (heatDemandDataList.Count > 0)
{
<MudContainer class="mt-8">

    <MudDataGrid Items="@heatDemandDataList" Hover Dense Striped>
        <Columns>
            <PropertyColumn Property="data => data.StartDate" Title="StartDate"/>
            <PropertyColumn Property="data => data.EndDate" Title="EndDate"/>
            <PropertyColumn Property="data => data.Value1" Title="HeatDemand"/>
            <PropertyColumn Property="data => data.Value2" Title="ElectricityDemand"/>
        </Columns>
    </MudDataGrid>

</MudContainer>
}


@code {

    readonly List<Boiler> _boilers =
    [
        new Boiler
        {
            Name = "Gas Boiler",
            ImagePath = "gas-boiler",
            MaxHeat = "5.0 MW",
            MaxElectricity = "",
            ProductionCosts = "500 DKK / MWh(th)",
            CO2Emissions = "215 kg / MWh(th)",
            PrimaryEnergy = "1,1 MWh(gas) / MWh(th)"
        },

        new Boiler
        {
            Name = "Oil Boiler",
            ImagePath = "oil-boiler",
            MaxHeat = "4.0 MW",
            MaxElectricity = "",
            ProductionCosts = "700 DKK / MWh(th)",
            CO2Emissions = "265 kg / MWh(th)",
            PrimaryEnergy = "1,2 MWh(oil) / MWh(th)"
        },

        new Boiler
        {
            Name = "Gas Motor",
            ImagePath = "gas-motor",
            MaxHeat = "3.6 MW",
            MaxElectricity = "2.7 MW",
            ProductionCosts = "1,100 DKK / MWh(th)",
            CO2Emissions = "640 kg / MWh(th)",
            PrimaryEnergy = "1.9 MWh(gas) / MWh(th)"
        },

        new Boiler
        {
            Name = "Electric Boiler",
            ImagePath = "electric-boiler",
            MaxHeat = "8.0 MW",
            MaxElectricity = "-8.0 MW",
            ProductionCosts = "50 DKK / MWh(th)",
            CO2Emissions = "", // As no value provided
            PrimaryEnergy = "" // As no value provided
        }
    ];

    public class Boiler
    {
        public string Name { get; set; }
        public string ImagePath { get; set; }
        public string MaxHeat { get; set; }
        public string MaxElectricity { get; set; }
        public string ProductionCosts { get; set; }
        public string CO2Emissions { get; set; }
        public string PrimaryEnergy { get; set; }
        public SortDirection? SortDirection { get; set; }
        public string ImageBase64 { get; set; }
    }

    async void OpenDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("Boilers", _boilers);

        var dialog = DialogService.Show<AddBoilerDialog>("Add Boiler", parameters, new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true });

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            StateHasChanged();
        }
    }

    private string DisplayData(string data) => data.Length != 0 ? data : "No Data";
    private List<HeatDemandData> heatDemandDataList = new List<HeatDemandData>();

    public class HeatDemandData
    {
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public float Value1 { get; set; }
        public float Value2 { get; set; }
    }

    private async Task HandleCSVUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            var reader = new StreamReader(file.OpenReadStream());
            var csvContent = await reader.ReadToEndAsync();

            var rows = csvContent.Split('\n');

            // Use CultureInfo to handle potential localization issues with decimal point/comma
            var culture = CultureInfo.InvariantCulture;

            foreach (var row in rows)
            {
                var values = row.Split(',');
                if (values.Length == 4)
                {
                    heatDemandDataList.Add(new HeatDemandData
                    {
                        StartDate = DateTime.Parse(values[0], culture),
                        EndDate = DateTime.Parse(values[1], culture),
                        Value1 = float.Parse(values[2], culture),
                        Value2 = float.Parse(values[3], culture),
                    });
                }
            }

            // Notify Blazor to re-render as the data has changed.
            StateHasChanged();
        }
    }

}
